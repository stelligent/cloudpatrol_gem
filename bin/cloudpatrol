#!/usr/bin/env ruby
require 'gli'

begin # Remove this begin/rescue before distributing the app
require 'cloudpatrol'
rescue LoadError
  exit 64
end

include GLI::App

program_desc 'Helps you keep Amazon cloud clean'

version Cloudpatrol::VERSION

desc 'Specify AWS Access Key ID'
arg_name 'string'
flag :aws_access_key_id

desc 'Specify AWS Secret Access Key'
arg_name 'string'
flag :aws_secret_access_key

desc 'AWS Identity and Access Management'
command "iam" do |c|
  c.desc "Deletes all IAM users that do not have MFA enabled. Users with underscore (_) in their names are kept."
  c.command "clean-users" do |subc|
    subc.action do |global_options,options,args|
      count = Cloudpatrol::Tasks::IAM.new.clean_users
      puts "Deleted users: #{count}"
    end
  end
end

desc 'AWS Elastic Compute Cloud'
command "ec2" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [:d, :days]

  c.desc "Deletes AWS EC2 key pairs that have existed for configurable number of days"
  c.command "clean-keypairs" do |subc|
    subc.action do |global_options,options,args|
      puts "doesn't work"
    end
  end

  c.desc "Deletes Security Groups that are no longer being used by AWS EC2 Instances"
  c.command "clean-security-groups" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting unused security groups"
    end
  end

  c.desc "Deletes AWS EC2 Instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting instances older than #{options[:days]}"
    end
  end

  c.desc "Starts AWS EC2 Instances"
  c.command "start-instances" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "starting instances"
    end
  end

  c.desc "Stops AWS EC2 Instances"
  c.command "stop-instances" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "stopping instances"
    end
  end
end

desc 'AWS OpsWorks'
command "opsworks" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [:d, :days]

  c.desc "Deletes AWS OpsWorks apps that have existed for configurable number of days"
  c.command "clean-apps" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting apps older than #{options[:days]}"
    end
  end

  c.desc "Deletes AWS OpsWorks instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting instances older than #{options[:days]}"
    end
  end

  c.desc "Deletes AWS OpsWorks layers that have existed for configurable number of days"
  c.command "clean-layers" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting layers older than #{options[:days]}"
    end
  end

  c.desc "Deletes AWS OpsWorks stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting stacks older than #{options[:days]}"
    end
  end
end

desc 'AWS CloudFormation'
command "cloudformation" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [:d, :days]

  c.desc "Deletes AWS CloudFormation stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      puts "pending"
      puts "deleting stacks older than #{options[:days]}"
    end
  end
end

pre do |global,command,options,args|
  $access_key_id = global[:aws_access_key_id] or raise ArgumentError, "--aws_access_key_id is required"
  $secret_access_key = global[:aws_secret_access_key] or raise ArgumentError, "--aws_secret_access_key is required"
  true
end

post do |global,command,options,args|
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
