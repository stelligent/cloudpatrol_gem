#!/usr/bin/env ruby
require 'gli'
require 'json'

begin # Remove this begin/rescue before distributing the app
  require 'cloudpatrol'
rescue LoadError
  exit 64
end

include GLI::App

program_desc "Helps you keep Amazon cloud clean"

version Cloudpatrol::VERSION

result = []

desc 'Specify AWS Access Key ID'
arg_name 'string'
flag :aws_access_key_id

desc 'Specify AWS Secret Access Key'
arg_name 'string'
flag :aws_secret_access_key

desc 'Specify region'
arg_name 'string'
flag :region

desc 'Specify config file'
flag :config_file

desc 'Display performance log of the task'
default_value false
switch [ :log ]

desc 'AWS Identity and Access Management'
command "iam" do |c|
  c.desc "Deletes all IAM users that do not have MFA enabled. Usernames that begin with underscore (_) are kept."
  c.command "clean-users" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :IAM, :clean_users)
      puts "Deleted #{result[:task].count} users" if result[:task]
    end
  end
end

desc 'AWS Elastic Compute Cloud'
command "ec2" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  # This action needs a feature for constant monitoring of creation time.
  # c.desc "Deletes AWS EC2 key pairs that have existed for configurable number of days"
  # c.command "clean-keypairs" do |subc|
  #   subc.action do |global_options,options,args|
  #     puts "doesn't work"
  #   end
  # end

  c.desc "Deletes AWS EC2 Instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["ec2_instance_age"] or raise "Specify max age for an instance with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_instances, days.to_i)
      puts "Deleted #{result[:task].count} instances" if result[:task]
    end
  end

  c.desc "Deletes Security Groups that are no longer being used by AWS EC2 Instances (notice that Security Groups featured in any inbound permission rules will not be deleted)"
  c.command "clean-security-groups" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_security_groups)
      puts "Deleted #{result[:task].count} security groups" if result[:task]
    end
  end

  c.desc "Deletes ports assigned to the default security group"
  c.command "clean-ports-in-default" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_ports_in_default)
      puts "Deleted #{result[:task].count} rules" if result[:task]
    end
  end

  c.desc "Starts AWS EC2 Instances"
  c.command "start-instances" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :start_instances)
      puts "Started #{result[:task].count} instances" if result[:task]
    end
  end

  c.desc "Stops AWS EC2 Instances"
  c.command "stop-instances" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :stop_instances)
      puts "Stopped #{result[:task].count} instances" if result[:task]
    end
  end

  c.desc "Releases EC2 Elastic IPs not associated with any instance"
  c.command "clean-elastic-ips" do |subc|
    subc.action do |global_options, options, args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_elastic_ips)
      puts "Deleted #{result[:task].count} Elastic IPs" if result[:task]
    end
  end
end

desc 'AWS OpsWorks'
command "opsworks" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  c.desc "Deletes AWS OpsWorks apps that have existed for configurable number of days"
  c.command "clean-apps" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["opsworks_app_age"] or raise "Specify max age for an app with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_apps, days.to_i)
      puts "Deleted #{result[:task].count} OpsWorks apps" if result[:task]
    end
  end

  c.desc "Deletes AWS OpsWorks instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["opsworks_instance_age"] or raise "Specify max age for an instance with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_instances, days.to_i)
      puts "Deleted #{result[:task].count} OpsWorks instances" if result[:task]
    end
  end

  c.desc "Deletes AWS OpsWorks layers that have existed for configurable number of days"
  c.command "clean-layers" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["opsworks_layer_age"] or raise "Specify max age for a layer with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_layers, days.to_i)
      puts "Deleted #{result[:task].count} OpsWorks layers" if result[:task]
    end
  end

  c.desc "Deletes AWS OpsWorks stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["opsworks_stack_age"] or raise "Specify max age for a stack with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_stacks, days.to_i)
      puts "Deleted #{result[:task].count} OpsWorks stacks" if result[:task]
    end
  end
end

desc 'AWS CloudFormation'
command "cloudformation" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  c.desc "Deletes AWS CloudFormation stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      days = options[:days] or $config["cloudformation_stack_age"] or raise "Specify max age for a stack with -d option or --config_file"
      result = Cloudpatrol.perform($aws_credentials, nil, :CloudFormation, :clean_stacks, days.to_i)
      puts "Deleted #{result[:task].count} CloudFormation stacks" if result[:task]
    end
  end
end

desc 'CloudPatrol log'
command "log" do |c|
  c.desc "overrides default table name"
  c.default_value "cloudpatrol-log"
  c.flag [ :t, :table ]

  c.action do |global_options,options,args|
    table_name = options[:table] || "cloudpatrol-log"
    result = Cloudpatrol.get_log($aws_credentials, table_name)
    if result[:success]
      puts result[:log]
    else
      puts result[:error]
    end
  end
end

pre do |global, command, options, args|
  $aws_credentials = {}
  $config = {}

  if global[:config_file]
    if File.readable?(global[:config_file])
      $config = JSON.parse(File.read(global[:config_file])) rescue raise(ArgumentError, "invalid config file")
    else
      raise ArgumentError, "--config_file: no such file"
    end
  end

  $aws_credentials[:access_key_id] = global[:aws_access_key_id] || $config["aws_access_key_id"] || raise(ArgumentError, "--aws_access_key_id or --config_file is required")
  $aws_credentials[:secret_access_key] = global[:aws_secret_access_key] || $config["aws_secret_access_key"] || raise(ArgumentError, "--aws_secret_access_key or --config_file is required")
  $aws_credentials[:region] = global[:region] or "us-east-1"
  true
end

post do |global, command, options, args|
  puts result[:formatted] if global[:log] and command.name != "log"
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
