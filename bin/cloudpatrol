#!/usr/bin/env ruby
require 'gli'

begin # Remove this begin/rescue before distributing the app
  require 'cloudpatrol'
rescue LoadError
  exit 64
end

include GLI::App

program_desc "Helps you keep Amazon cloud clean"

version Cloudpatrol::VERSION

desc 'Specify AWS Access Key ID'
arg_name 'string'
flag :aws_access_key_id

desc 'Specify AWS Secret Access Key'
arg_name 'string'
flag :aws_secret_access_key

desc 'Specify region'
arg_name 'string'
flag :region

desc 'AWS Identity and Access Management'
command "iam" do |c|
  c.desc "Deletes all IAM users that do not have MFA enabled. Usernames that begin with underscore (_) are kept."
  c.command "clean-users" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :IAM, :clean_users)
      puts "Deleted #{result[:task].count} users"
    end
  end
end

desc 'AWS Elastic Compute Cloud'
command "ec2" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  # This action needs a feature for constant monitoring of creation time.
  # c.desc "Deletes AWS EC2 key pairs that have existed for configurable number of days"
  # c.command "clean-keypairs" do |subc|
  #   subc.action do |global_options,options,args|
  #     puts "doesn't work"
  #   end
  # end

  c.desc "Deletes AWS EC2 Instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for an instance with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_instances, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} instances"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Deletes Security Groups that are no longer being used by AWS EC2 Instances (notice that Security Groups featured in any inbound permission rules will not be deleted)"
  c.command "clean-security-groups" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_security_groups)
      if result[:task]
        puts "Deleted #{result[:task].count} security groups"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Deletes ports assigned to default security group"
  c.command "clean-ports-in-default" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_ports_in_default)
      if result[:task]
        puts "Deleted #{result[:task].count} rules"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Starts AWS EC2 Instances"
  c.command "start-instances" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :start_instances)
      if result[:task]
        puts "Started #{result[:task].count} instances"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Stops AWS EC2 Instances"
  c.command "stop-instances" do |subc|
    subc.action do |global_options,options,args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :stop_instances)
      if result[:task]
        puts "Stopped #{result[:task].count} instances"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Releases EC2 Elastic IPs not associated with any instance"
  c.command "clean-elastic-ips" do |subc|
    subc.action do |global_options, options, args|
      result = Cloudpatrol.perform($aws_credentials, nil, :EC2, :clean_elastic_ips)
      if result[:task]
        puts "Deleted #{result[:task].count} Elastic IPs"
      else
        puts "Unsuccessful"
      end
    end
  end
end

desc 'AWS OpsWorks'
command "opsworks" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  c.desc "Deletes AWS OpsWorks apps that have existed for configurable number of days"
  c.command "clean-apps" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for an app with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_apps, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} OpsWorks apps"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Deletes AWS OpsWorks instances that have existed for configurable number of days"
  c.command "clean-instances" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for an instance with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_instances, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} OpsWorks instances"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Deletes AWS OpsWorks layers that have existed for configurable number of days"
  c.command "clean-layers" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for a layer with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_layers, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} OpsWorks layers"
      else
        puts "Unsuccessful"
      end
    end
  end

  c.desc "Deletes AWS OpsWorks stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for a stack with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :OpsWorks, :clean_stacks, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} OpsWorks stacks"
      else
        puts "Unsuccessful"
      end
    end
  end
end

desc 'AWS CloudFormation'
command "cloudformation" do |c|
  c.desc "specifies maximum age"
  c.default_value 5
  c.arg_name "number"
  c.flag [ :d, :days ]

  c.desc "Deletes AWS CloudFormation stacks that have existed for configurable number of days"
  c.command "clean-stacks" do |subc|
    subc.action do |global_options,options,args|
      raise "Specify max age for a stack with -d option" unless options[:days]
      result = Cloudpatrol.perform($aws_credentials, nil, :CloudFormation, :clean_stacks, options[:days].to_i)
      if result[:task]
        puts "Deleted #{result[:task].count} CloudFormation stacks"
      else
        puts "Unsuccessful"
      end
    end
  end
end

pre do |global, command, options, args|
  $aws_credentials = {}
  $aws_credentials[:access_key_id] = global[:aws_access_key_id] or raise ArgumentError, "--aws_access_key_id is required"
  $aws_credentials[:secret_access_key] = global[:aws_secret_access_key] or raise ArgumentError, "--aws_secret_access_key is required"
  $aws_credentials[:region] = global[:region] || "us-east-1"
  true
end

post do |global, command, options, args|
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
